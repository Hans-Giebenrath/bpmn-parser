name: Rust Cross-Platform Build

on:
  push:
    branches: [ "main", "workflow" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
    - uses: actions/checkout@v4

    - name: Setup CBC (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y coinor-cbc coinor-libcbc-dev

    # - name: Setup vcpkg and install CBC (Windows)
    #   if: matrix.os == 'windows-latest'
    #   run: |
    #     git clone https://github.com/microsoft/vcpkg.git ${{ runner.temp }}/vcpkg
    #     ${{ runner.temp }}/vcpkg/bootstrap-vcpkg.bat
    #     ${{ runner.temp }}/vcpkg/vcpkg install cbc --triplet x64-windows-static
    #   shell: cmd

    - name: Add cbc-src to Cargo.toml
      run: |
        echo 'cbc-src = "0.2.8"' >> Cargo.toml

    - name: Add coincbc-sys to Cargo.toml
      run: |
        echo 'coincbc-sys = "0.2.5"' >> Cargo.toml

    - name: Add cbc_src to main.rs
      run: |
        echo 'extern crate cbc_src;' >> src/main.rs
        
    - name: Release (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        export RUSTFLAGS="-C link-arg=-lstdc++"
        cargo build --release

    # - name: Release (Windows)
    #   if: matrix.os == 'windows-latest'
    #   run: |
    #     set RUSTFLAGS=-C target-feature=+crt-static
    #     cargo build --release --target x86_64-pc-windows-msvc
    #   shell: cmd

    - name: Upload release
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-release
        path: target/release/
